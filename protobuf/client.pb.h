// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#ifndef PROTOBUF_client_2eproto__INCLUDED
#define PROTOBUF_client_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Client {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_2eproto();
void protobuf_AssignDesc_client_2eproto();
void protobuf_ShutdownFile_client_2eproto();

class Handshake;
class Package;

enum Handshake_NetworkType {
  Handshake_NetworkType_UNKNOWN = 0,
  Handshake_NetworkType_MAIN = 1,
  Handshake_NetworkType_TEST = 2
};
bool Handshake_NetworkType_IsValid(int value);
const Handshake_NetworkType Handshake_NetworkType_NetworkType_MIN = Handshake_NetworkType_UNKNOWN;
const Handshake_NetworkType Handshake_NetworkType_NetworkType_MAX = Handshake_NetworkType_TEST;
const int Handshake_NetworkType_NetworkType_ARRAYSIZE = Handshake_NetworkType_NetworkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Handshake_NetworkType_descriptor();
inline const ::std::string& Handshake_NetworkType_Name(Handshake_NetworkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Handshake_NetworkType_descriptor(), value);
}
inline bool Handshake_NetworkType_Parse(
    const ::std::string& name, Handshake_NetworkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Handshake_NetworkType>(
    Handshake_NetworkType_descriptor(), name, value);
}
enum Package_PackageType {
  Package_PackageType_UNKNOWN = 0,
  Package_PackageType_CHAIN_DATA = 1,
  Package_PackageType_BLOCK_DATA = 2,
  Package_PackageType_TX_DATA = 3
};
bool Package_PackageType_IsValid(int value);
const Package_PackageType Package_PackageType_PackageType_MIN = Package_PackageType_UNKNOWN;
const Package_PackageType Package_PackageType_PackageType_MAX = Package_PackageType_TX_DATA;
const int Package_PackageType_PackageType_ARRAYSIZE = Package_PackageType_PackageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Package_PackageType_descriptor();
inline const ::std::string& Package_PackageType_Name(Package_PackageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Package_PackageType_descriptor(), value);
}
inline bool Package_PackageType_Parse(
    const ::std::string& name, Package_PackageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Package_PackageType>(
    Package_PackageType_descriptor(), name, value);
}
// ===================================================================

class Handshake : public ::google::protobuf::Message {
 public:
  Handshake();
  virtual ~Handshake();

  Handshake(const Handshake& from);

  inline Handshake& operator=(const Handshake& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Handshake& default_instance();

  void Swap(Handshake* other);

  // implements Message ----------------------------------------------

  Handshake* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Handshake& from);
  void MergeFrom(const Handshake& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Handshake_NetworkType NetworkType;
  static const NetworkType UNKNOWN = Handshake_NetworkType_UNKNOWN;
  static const NetworkType MAIN = Handshake_NetworkType_MAIN;
  static const NetworkType TEST = Handshake_NetworkType_TEST;
  static inline bool NetworkType_IsValid(int value) {
    return Handshake_NetworkType_IsValid(value);
  }
  static const NetworkType NetworkType_MIN =
    Handshake_NetworkType_NetworkType_MIN;
  static const NetworkType NetworkType_MAX =
    Handshake_NetworkType_NetworkType_MAX;
  static const int NetworkType_ARRAYSIZE =
    Handshake_NetworkType_NetworkType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NetworkType_descriptor() {
    return Handshake_NetworkType_descriptor();
  }
  static inline const ::std::string& NetworkType_Name(NetworkType value) {
    return Handshake_NetworkType_Name(value);
  }
  static inline bool NetworkType_Parse(const ::std::string& name,
      NetworkType* value) {
    return Handshake_NetworkType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .Client.Handshake.NetworkType network = 3 [default = MAIN];
  inline bool has_network() const;
  inline void clear_network();
  static const int kNetworkFieldNumber = 3;
  inline ::Client::Handshake_NetworkType network() const;
  inline void set_network(::Client::Handshake_NetworkType value);

  // optional int64 blocknum = 4;
  inline bool has_blocknum() const;
  inline void clear_blocknum();
  static const int kBlocknumFieldNumber = 4;
  inline ::google::protobuf::int64 blocknum() const;
  inline void set_blocknum(::google::protobuf::int64 value);

  // optional int64 pow = 5;
  inline bool has_pow() const;
  inline void clear_pow();
  static const int kPowFieldNumber = 5;
  inline ::google::protobuf::int64 pow() const;
  inline void set_pow(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Client.Handshake)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_network();
  inline void clear_has_network();
  inline void set_has_blocknum();
  inline void clear_has_blocknum();
  inline void set_has_pow();
  inline void clear_has_pow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* version_;
  ::std::string* name_;
  ::google::protobuf::int64 blocknum_;
  ::google::protobuf::int64 pow_;
  int network_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static Handshake* default_instance_;
};
// -------------------------------------------------------------------

class Package : public ::google::protobuf::Message {
 public:
  Package();
  virtual ~Package();

  Package(const Package& from);

  inline Package& operator=(const Package& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Package& default_instance();

  void Swap(Package* other);

  // implements Message ----------------------------------------------

  Package* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Package& from);
  void MergeFrom(const Package& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Package_PackageType PackageType;
  static const PackageType UNKNOWN = Package_PackageType_UNKNOWN;
  static const PackageType CHAIN_DATA = Package_PackageType_CHAIN_DATA;
  static const PackageType BLOCK_DATA = Package_PackageType_BLOCK_DATA;
  static const PackageType TX_DATA = Package_PackageType_TX_DATA;
  static inline bool PackageType_IsValid(int value) {
    return Package_PackageType_IsValid(value);
  }
  static const PackageType PackageType_MIN =
    Package_PackageType_PackageType_MIN;
  static const PackageType PackageType_MAX =
    Package_PackageType_PackageType_MAX;
  static const int PackageType_ARRAYSIZE =
    Package_PackageType_PackageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PackageType_descriptor() {
    return Package_PackageType_descriptor();
  }
  static inline const ::std::string& PackageType_Name(PackageType value) {
    return Package_PackageType_Name(value);
  }
  static inline bool PackageType_Parse(const ::std::string& name,
      PackageType* value) {
    return Package_PackageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Client.Package.PackageType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Client::Package_PackageType type() const;
  inline void set_type(::Client::Package_PackageType value);

  // @@protoc_insertion_point(class_scope:Client.Package)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_client_2eproto();
  friend void protobuf_AssignDesc_client_2eproto();
  friend void protobuf_ShutdownFile_client_2eproto();

  void InitAsDefaultInstance();
  static Package* default_instance_;
};
// ===================================================================


// ===================================================================

// Handshake

// required string version = 1;
inline bool Handshake::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Handshake::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Handshake::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Handshake::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& Handshake::version() const {
  return *version_;
}
inline void Handshake::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void Handshake::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void Handshake::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Handshake::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* Handshake::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Handshake::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 2;
inline bool Handshake::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Handshake::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Handshake::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Handshake::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Handshake::name() const {
  return *name_;
}
inline void Handshake::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Handshake::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Handshake::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Handshake::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Handshake::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Handshake::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Client.Handshake.NetworkType network = 3 [default = MAIN];
inline bool Handshake::has_network() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Handshake::set_has_network() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Handshake::clear_has_network() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Handshake::clear_network() {
  network_ = 1;
  clear_has_network();
}
inline ::Client::Handshake_NetworkType Handshake::network() const {
  return static_cast< ::Client::Handshake_NetworkType >(network_);
}
inline void Handshake::set_network(::Client::Handshake_NetworkType value) {
  assert(::Client::Handshake_NetworkType_IsValid(value));
  set_has_network();
  network_ = value;
}

// optional int64 blocknum = 4;
inline bool Handshake::has_blocknum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Handshake::set_has_blocknum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Handshake::clear_has_blocknum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Handshake::clear_blocknum() {
  blocknum_ = GOOGLE_LONGLONG(0);
  clear_has_blocknum();
}
inline ::google::protobuf::int64 Handshake::blocknum() const {
  return blocknum_;
}
inline void Handshake::set_blocknum(::google::protobuf::int64 value) {
  set_has_blocknum();
  blocknum_ = value;
}

// optional int64 pow = 5;
inline bool Handshake::has_pow() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Handshake::set_has_pow() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Handshake::clear_has_pow() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Handshake::clear_pow() {
  pow_ = GOOGLE_LONGLONG(0);
  clear_has_pow();
}
inline ::google::protobuf::int64 Handshake::pow() const {
  return pow_;
}
inline void Handshake::set_pow(::google::protobuf::int64 value) {
  set_has_pow();
  pow_ = value;
}

// -------------------------------------------------------------------

// Package

// required .Client.Package.PackageType type = 1;
inline bool Package::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Package::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Package::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Package::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Client::Package_PackageType Package::type() const {
  return static_cast< ::Client::Package_PackageType >(type_);
}
inline void Package::set_type(::Client::Package_PackageType value) {
  assert(::Client::Package_PackageType_IsValid(value));
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Client

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Client::Handshake_NetworkType>() {
  return ::Client::Handshake_NetworkType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Client::Package_PackageType>() {
  return ::Client::Package_PackageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_2eproto__INCLUDED
